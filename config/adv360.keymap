/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings =
                <&kp>,
                <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
        };
        mod_sticky: mod_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_STICKY";
            bindings =
                <&kp>,
                <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
        layertap_stickylayer: layertap_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP_STICKYLAYER";
            bindings =
                <&mo>,
                <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        stickytap_layerhold: stickytap_layerhold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYTAP_LAYERHOLD";
            bindings =
                <&mo>,
                <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
        };
        kphold_stickylayer: kphold_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "KPHOLD_STICKYLAYER";
            bindings =
                <&kp>,
                <&sl>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
        hyphen_dash: hyphen_dash {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPHEN_DASH";
            #binding-cells = <0>;
            bindings =
                <&kp MINUS>,
                <&kp LA(LS(MINUS))>;
        };
        undo_redo_dance: undo_redo_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDO_REDO_DANCE";
            #binding-cells = <0>;
            bindings =
                <&kp LG(Z)>,
                <&kp LS(LG(Z))>;
        };
        word_sel_shift_morph: word_sel_shift_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "WORD_SEL_SHIFT_MORPH";
            bindings =
                <&kp LA(LS(LEFT))>,
                <&kp LS(LA(RIGHT))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
        hm_layer: hm_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LAYER";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
        };
        paste_plainpaste_dance: paste_plainpaste_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_PLAINPASTE_DANCE";
            #binding-cells = <0>;
            bindings =
                <&hm LG(LS(V)) LG(V)>,
                <&kp LG(LA(V))>;
        };
        hm_gui: hm_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_GUI";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            global-quick-tap;
            flavor = "balanced";
        };
        l_index_shift: l_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "L_INDEX_SHIFT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <22 42 62 23 43 63 24 44 64 25 45 65 26 46 66 13 27 47 67 83 82 81 80 79 39 40 78 77 59 76 7 8 9 10 11 12 21 22 23 24 25 26 41 42 43 44 45 46>;
        };
        r_index_shift: r_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "R_INDEX_SHIFT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 48 49 50 51 52 53 54 55 56 57 68 69 70 71 72 73 74 75>;
        };
        thumb_shift: thumb_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_SHIFT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lthumb_layer2 {
            bindings = <&hm_layer 4 ESC>;
            key-positions = <73 74>;
            layers = <0>;
        };

        rthumb_layer2 {
            bindings = <&hm_layer 4 ESC>;
            key-positions = <77 78>;
            layers = <0>;
        };

        twoshft_caps {
            bindings = <&caps_word>;
            key-positions = <48 67>;
        };

        moot_combo {
            bindings = <&kp LS(LA(LC(LG(F11))))>;
            key-positions = <7 21>;
        };

        onepass_combo {
            bindings = <&kp LG(GRAVE)>;
            key-positions = <74 77>;
        };

        em_combo {
            bindings = <&kp LA(LS(MINUS))>;
            key-positions = <23 24>;
        };

        dash_combo {
            bindings = <&kp MINUS>;
            key-positions = <63 64>;
        };

        apos_combo {
            bindings = <&kp SQT>;
            key-positions = <18 17>;
        };

        number_combo {
            bindings = <&tog 1>;
            key-positions = <73 78>;
        };

        quote_combo {
            bindings = <&kp LS(SQT)>;
            key-positions = <52 51>;
        };

        index_caps_word {
            bindings = <&caps_word>;
            key-positions = <32 43>;
        };
    };

    macros {
        word_selector: word_selector {
            compatible = "zmk,behavior-macro";
            label = "WORD_SELECTOR";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LS(LA(LEFT))>;
        };
        app_switcher: app_switcher {
            compatible = "zmk,behavior-macro";
            label = "APP_SWITCHER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp EQUAL     &kp N1   &kp N2    &kp N3                  &kp N4  &kp N5             &tog 1                                                                                                              &mo 3  &kp N6                  &kp N7           &kp N8                  &kp N9         &kp N0  &kp MINUS
              &kp TAB      &kp Q    &kp W     &kp E                   &kp R   &kp T      &app_switcher                                                                                    &hm LS(LA(SLASH)) LS(LG(SLASH))   &kp Y                   &kp U            &kp I                   &kp O          &kp P   &kp BSLH
&sk LS(LA(LG(LCTRL)))      &kp A    &kp S     &kp D  &l_index_shift LSHFT F   &kp G   &undo_redo_dance  &hm LG(X) LG(C)  &kp LCTRL  &none  &none  &kp RCTRL  &hm_gui LC(SPACE) LG(SPACE)            &word_sel_shift_morph   &kp H  &r_index_shift RSHFT J            &kp K                   &kp L  &kp SEMICOLON    &kp SQT
            &kp LSHFT      &kp Z    &kp X     &kp C                   &kp V   &kp B              &none            &none   &kp LALT  &none  &none   &kp RALT                        &none                            &none   &kp N                   &kp M  &hm MINUS COMMA  &hm EXCLAMATION PERIOD      &kp SLASH  &kp RSHFT
                &sl 4  &kp GRAVE  &kp ESC  &kp LEFT               &kp RIGHT          &hm_gui LGUI BSPC  &hm_layer 2 TAB   &kp LGUI                 &kp RGUI            &hm_layer 5 ENTER               &hm_gui RGUI SPACE                          &kp UP         &kp DOWN                &kp LBKT       &kp RBKT      &sl 4
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5    &trans                                                               &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
  &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T     &none                                                               &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
  &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G     &none  &kp LCTRL  &kp LALT  &none  &none   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
&kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B     &none      &none  &kp HOME  &none  &none  &kp PG_UP      &none      &none   &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
    &mo 4  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC    &kp TAB   &kp END                &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 4
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3        &kp F4         &kp F5  &kp F6                 &tog 1                                                                       &kp C_VOLUME_UP  &kp F7       &kp F8         &kp F9    &kp F10  &kp F11  &kp F12
&trans  &trans  &trans      &kp HOME        &kp END  &trans  &kp LS(LA(LC(LG(R))))                                                                          &kp C_VOL_DN  &trans     &kp HOME         &kp UP    &kp END   &trans   &trans
&trans  &trans  &trans        &trans         &trans  &trans          &kp LS(LG(Z))  &paste_plainpaste_dance  &trans  &none  &none  &trans  &trans  &word_sel_shift_morph  &trans     &kp LEFT       &kp DOWN  &kp RIGHT   &trans   &trans
&trans  &trans  &trans   &kp PAGE_UP  &kp PAGE_DOWN  &trans                  &none                    &none  &trans  &none  &none  &trans   &none                  &none  &trans  &kp PAGE_UP  &kp PAGE_DOWN     &trans   &trans   &trans
&trans  &trans  &trans  &kp LA(LEFT)  &kp LA(RIGHT)                   &kp LA(BSPC)                   &trans  &trans                &trans  &trans                 &trans           &kp LA(UP)   &kp LA(DOWN)     &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                   &none                                                                           &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none         &none         &none         &none         &none         &none             &bootloader                                                                      &bootloader         &none         &none        &trans         &none         &none  &none
&none         &none         &none         &none         &none         &none  &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &none  &none  &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none        &trans        &trans        &trans         &none  &none
&none         &none         &none         &none         &none         &none                   &none       &none  &none  &none  &none       &none       &none                   &none         &none        &trans        &trans        &trans        &trans  &none
&none         &none         &none    &bl BL_INC    &bl BL_DEC                       &rgb_ug RGB_TOG  &bl BL_TOG  &none                     &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none  &none
            >;
        };

        layer_app {
            bindings = <
&trans  &kp LS(LG(NUMBER_1))  &trans        &trans         &trans  &trans  &trans                                                  &trans         &trans          &trans             &trans              &trans  &trans  &trans
&trans                &trans  &trans        &trans         &trans  &trans  &trans                                                  &trans         &trans          &trans             &trans              &trans  &trans  &trans
&trans                &trans  &trans        &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans          &trans             &trans       &kp LS(LG(L))  &trans  &trans
&trans                &trans  &trans        &trans         &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LG(N))   &kp LG(LS(M))  &kp LS(LG(COMMA))  &kp LS(LG(PERIOD))  &trans  &trans
&trans                &trans  &trans  &kp LC(LEFT)  &kp LC(RIGHT)          &trans  &trans  &trans                  &trans  &trans  &trans                 &kp LG(LC(UP))   &kp LG(LC(DOWN))              &trans  &trans  &trans
            >;
        };

        layer_symb {
            bindings = <
&trans           &trans         &trans             &trans                &trans                 &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp EXCLAMATION    &kp AT_SIGN           &kp HASH            &kp DOLLAR            &kp PERCENT  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans         &trans  &kp DOUBLE_QUOTES               &kp SQT                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &kp CARET  &kp AMPERSAND       &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans         &trans             &trans                &trans                         &trans  &trans  &trans                  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
