/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            global-quick-tap;
        };

        mod_sticky: mod_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        layertap_stickylayer: layertap_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP_STICKYLAYER";
            bindings = <&mo>, <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        stickytap_layerhold: stickytap_layerhold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYTAP_LAYERHOLD";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <175>;
        };

        kphold_stickylayer: kphold_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "KPHOLD_STICKYLAYER";
            bindings = <&kp>, <&sl>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        hyphen_dash: hyphen_dash {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPHEN_DASH";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp LA(LS(MINUS))>;
        };

        undo_redo_dance: undo_redo_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDO_REDO_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LG(Z)>, <&kp LS(LG(Z))>;
        };

        word_sel_shift_morph: word_sel_shift_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "WORD_SEL_SHIFT_MORPH";
            bindings = <&kp LA(LS(LEFT))>, <&kp LS(LA(RIGHT))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        hm_layer: hm_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
        };

        paste_plainpaste_dance: paste_plainpaste_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_PLAINPASTE_DANCE";
            #binding-cells = <0>;
            bindings = <&hm LG(LS(V)) LG(V)>, <&kp LG(LA(V))>;
        };

        hm_gui: hm_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_GUI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            global-quick-tap;
            flavor = "balanced";
        };

        l_index_shift: l_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "L_INDEX_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <22 42 62 23 43 63 24 44 64 25 45 65 26 46 66 13 27 47 67 83 82 81 80 79 39 40 78 77 59 76 7 8 9 10 11 12 21 22 23 24 25 26 41 42 43 44 45 46>;
        };

        r_index_shift: r_index_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "R_INDEX_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            flavor = "hold-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 48 49 50 51 52 53 54 55 56 57 68 69 70 71 72 73 74 75>;
        };

        thumb_shift: thumb_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
        };

        hm_left: hm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            flavor = "balanced";
            global-quick-tap;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 40 41 42 43 44 45 46 47 58 60 61 62 63 64 65 66 67 77 78 79 80 81 82 83 76 59 39>;
        };

        hm_right: hm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <210>;
            global-quick-tap;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 48 49 50 51 52 53 54 55 56 57 68 69 70 71 72 73 74 75>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lthumb_layer2 {
            bindings = <&hm_layer 4 ESC>;
            key-positions = <73 74>;
            layers = <0 1 2 6 5 4 3>;
        };

        rthumb_hyper {
            bindings = <&hm LS(LA(LC(LGUI))) ESC>;
            key-positions = <77 78>;
            layers = <0 1 6 3 4 5 2>;
        };

        twoshft_caps {
            bindings = <&kp CAPS>;
            key-positions = <48 67>;
        };

        moot_combo {
            bindings = <&kp LS(LA(LC(LG(F11))))>;
            key-positions = <7 21>;
        };

        onepass_combo {
            bindings = <&hm_gui LS(LG(NUMBER_1)) LG(GRAVE)>;
            key-positions = <74 77>;
        };

        index_caps_word {
            bindings = <&caps_word>;
            key-positions = <32 43>;
        };

        shift_alt_right {
            bindings = <&kp RA(RSHFT)>;
            key-positions = <43 44>;
        };

        shift_alt_left {
            bindings = <&kp LA(LSHFT)>;
            key-positions = <32 31>;
        };

        cmd_shift_left {
            bindings = <&kp LS(LGUI)>;
            key-positions = <73 32>;
        };

        cmd_shift_right {
            bindings = <&kp RS(RGUI)>;
            key-positions = <78 43>;
        };

        alt_ctrl_left {
            bindings = <&kp LC(LALT)>;
            key-positions = <31 30>;
        };

        alt_ctrl_right {
            bindings = <&kp RA(RCTRL)>;
            key-positions = <44 45>;
        };

        shft_ctrl_left {
            bindings = <&kp LC(LSHFT)>;
            key-positions = <32 30>;
        };

        shft_ctrl_right {
            bindings = <&kp RC(RSHFT)>;
            key-positions = <43 45>;
        };

        shft_alt_ctrl_left {
            bindings = <&kp LA(LC(LSHFT))>;
            key-positions = <32 31 30>;
        };

        shft_alt_ctrl_right {
            bindings = <&kp RA(RC(RSHFT))>;
            key-positions = <43 44 45>;
        };

        cmd_alt_left {
            bindings = <&kp LA(LGUI)>;
            key-positions = <73 31>;
        };

        cmd_alt_right {
            bindings = <&kp RA(RGUI)>;
            key-positions = <78 44>;
        };

        cmd_ctrl_left {
            bindings = <&kp LC(LGUI)>;
            key-positions = <73 30>;
        };

        cmd_ctrl_right {
            bindings = <&kp RC(RGUI)>;
            key-positions = <78 45>;
        };

        cmd_shft_alt_left {
            bindings = <&kp LS(LA(LGUI))>;
            key-positions = <73 32 31>;
        };

        cmd_shft_alt_right {
            bindings = <&kp RS(RA(RGUI))>;
            key-positions = <78 43 44>;
        };

        cmd_shft_ctrl_left {
            bindings = <&kp LC(LS(LGUI))>;
            key-positions = <73 32 30>;
        };

        cmd_shft_ctrl_right {
            bindings = <&kp RS(RC(RGUI))>;
            key-positions = <78 43 45>;
        };

        cmd_alt_ctrl_left {
            bindings = <&kp LA(LC(LGUI))>;
            key-positions = <73 31 30>;
        };

        cmd_alt_ctrl_right {
            bindings = <&kp RA(RC(RGUI))>;
            key-positions = <78 45 44>;
        };

        hyper_left {
            bindings = <&kp LS(LA(LC(LGUI)))>;
            key-positions = <73 32 31 30>;
        };

        hyper_right {
            bindings = <&kp RS(RA(RC(RGUI)))>;
            key-positions = <78 43 44 45>;
        };

        nav_combo {
            bindings = <&to 6>;
            key-positions = <23 24 25>;
            layers = <0 1>;
        };

        num_combo {
            bindings = <&to 1>;
            key-positions = <63 64 65>;
            layers = <0 6>;
        };

        nav2default_combo {
            bindings = <&to 0>;
            key-positions = <23 24 25>;
            layers = <6>;
        };

        num2default_combo {
            bindings = <&to 0>;
            key-positions = <63 64 65>;
            layers = <1>;
        };

        dashdash_combo {
            bindings = <&hm LS(LA(MINUS)) MINUS>;
            key-positions = <17 18>;
        };

        comma_combo {
            bindings = <&kp COMMA>;
            key-positions = <63 64>;
        };
    };

    macros {
        word_selector: word_selector {
            compatible = "zmk,behavior-macro";
            label = "WORD_SELECTOR";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT) &kp LA(RIGHT) &kp LS(LA(LEFT))>;
        };

        app_switcher: app_switcher {
            compatible = "zmk,behavior-macro";
            label = "APP_SWITCHER";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL              &kp N1     &kp N2            &kp N3           &kp N4                  &kp N5                &tog 1                                                                                                                                                                                                       &mo 3                            &kp N6  &kp N7                  &kp N8            &kp N9             &kp N0         &kp MINUS
&kp TAB                &kp Q      &kp W             &kp E            &kp R                   &kp T                 &app_switcher                                                                                                                                                                                                &hm LS(LA(SLASH)) LS(LG(SLASH))  &kp Y   &kp U                   &kp I             &kp O              &kp P          &kp BSLH
&sk LS(LA(LG(LCTRL)))  &kp A      &hm_left LCTRL S  &hm_left LALT D  &l_index_shift LSHFT F  &kp G                 &undo_redo_dance   &hm_gui LS(LA(LC(F1))) LG(LS(LA(LC(F1))))  &hm_gui LS(LA(LC(F2))) LS(LA(LC(LG(F2))))  &none  &none  &hm_gui LS(LA(LC(F6))) LS(LA(LC(LG(F6))))  &hm_gui LS(LA(LC(F5))) LS(LA(LC(LG(F5))))  &word_sel_shift_morph            &kp H   &r_index_shift RSHFT J  &hm_right RALT K  &hm_right RCTRL L  &kp SEMICOLON  &kp SQT
&kp LSHFT              &kp Z      &hm LG(X) X       &hm LG(C) C      &hm LG(V) V             &hm_left LG(LA(V)) B  &none              &none                                      &hm_gui LS(LA(LC(F3))) LS(LA(LC(LG(F3))))  &none  &none  &hm_gui LS(LA(LC(F7))) LS(LC(LG(LA(F7))))  &none                                      &none                            &kp N   &kp M                   &kp UP_ARROW      &hm COMMA PERIOD   &kp SLASH      &kp RSHFT
&sl 4                  &kp GRAVE  &kp ENTER         &kp LEFT         &kp RIGHT                                     &hm_gui LGUI BSPC  &hm_layer 1 TAB                            &hm_gui LS(LA(LC(F4))) LG(LS(LA(LC(F4))))                &hm_gui LS(LA(LC(F8))) LS(LA(LC(LG(F8))))  &hm_layer 6 ENTER                          &hm_gui RGUI SPACE                       &kp LEFT                &kp DOWN          &kp RIGHT          &kp RBKT       &sl 4
            >;
        };

        layer_keypad {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans  &trans                                                                             &kp C_VOLUME_UP  &trans  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &trans  &trans  &trans     &trans     &trans  &kp LS(LG(LA(LC(R))))                                                              &kp C_VOL_DN     &trans  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&trans  &trans  &trans  &trans     &trans     &trans  &kp LS(LG(Z))          &trans  &trans  &none  &none  &trans  &trans                &trans           &trans  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&trans  &trans  &trans  &kp PG_UP  &kp PG_DN  &trans  &none                  &none   &trans  &none  &none  &trans  &none                 &none            &trans  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp SLASH        &trans
&trans  &trans  &trans  &kp UP     &kp DOWN           &trans                 &trans  &trans                &trans  &hm_layer 5 KP_ENTER  &kp KP_N0                &trans      &trans        &kp KP_DOT     &trans           &trans
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3    &kp F4       &kp F5         &kp F6  &trans                                                                 &kp C_VOLUME_UP        &kp F7  &kp F8       &kp F9         &kp F10    &kp F11  &kp F12
&trans  &trans  &kp HOME  &kp UP       &kp END        &trans  &trans                                                                 &kp C_VOL_DN           &trans  &kp HOME     &kp UP         &kp END    &trans   &trans
&trans  &trans  &kp LEFT  &kp DOWN     &kp RIGHT      &trans  &trans  &paste_plainpaste_dance  &trans  &none  &none  &trans  &trans  &word_sel_shift_morph  &trans  &kp LEFT     &kp DOWN       &kp RIGHT  &trans   &trans
&trans  &trans  &trans    &kp PAGE_UP  &kp PAGE_DOWN  &trans  &none   &none                    &trans  &none  &none  &trans  &none   &none                  &trans  &kp PAGE_UP  &kp PAGE_DOWN  &trans     &trans   &trans
&trans  &trans  &trans    &kp LA(UP)   &kp LA(DOWN)           &trans  &trans                   &trans                &trans  &trans  &trans                         &kp LA(UP)   &kp LA(DOWN)   &trans     &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                                            &trans                  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none  &none         &none         &none         &none         &none         &bootloader                                                                      &bootloader             &none         &none         &trans        &none         &none         &none
&none  &none         &none         &none         &none         &none         &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &none  &none  &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5  &none         &trans        &trans        &trans        &none         &none
&none  &none         &none         &none         &none         &none         &none                   &none       &none  &none  &none  &none       &none       &none                   &none         &trans        &trans        &trans        &trans        &none
&none  &none         &none         &bl BL_INC    &bl BL_DEC                  &rgb_ug RGB_TOG         &bl BL_TOG  &none                &none       &bl BL_TOG  &rgb_ug RGB_TOG                       &bl BL_INC    &bl BL_DEC    &none         &none         &none
            >;
        };

        layer_app {
            bindings = <
&trans  &kp LS(LG(NUMBER_1))  &trans  &trans        &trans         &trans  &trans                                                      &trans  &trans         &trans         &trans            &trans                                     &trans  &trans
&trans  &trans                &trans  &trans        &trans         &trans  &trans                                                      &trans  &trans         &trans         &trans            &trans                                     &trans  &trans
&trans  &trans                &trans  &trans        &trans         &trans  &kp LA(F3)  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans         &trans            &kp LS(LG(L))                              &trans  &trans
&trans  &trans                &trans  &trans        &trans         &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LG(N))  &kp LG(LS(M))  &kp LG(LC(UP))    &thumb_shift LS(LG(COMMA)) LS(LG(PERIOD))  &trans  &trans
&trans  &trans                &trans  &kp LC(LEFT)  &kp LC(RIGHT)          &trans      &trans  &trans                  &trans  &trans  &trans                 &kp LC(LEFT)   &kp LG(LC(DOWN))  &kp LC(RIGHT)                              &trans  &trans
            >;
        };

        layer_symb {
            bindings = <
&trans  &trans           &trans             &trans        &trans                   &trans                 &trans                                                        &trans  &trans  &trans       &trans         &trans     &trans  &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN        &kp HASH      &kp DOLLAR               &kp PERCENT            &trans                                                        &trans  &trans  &kp HOME     &kp UP         &kp END    &trans  &trans
&trans  &trans           &kp DOUBLE_QUOTES  &kp SQT       &hm LS(LA(MINUS)) MINUS  &trans                 &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT     &kp DOWN       &kp RIGHT  &trans  &trans
&trans  &kp CARET        &kp AMPERSAND      &kp ASTERISK  &kp LEFT_PARENTHESIS     &kp RIGHT_PARENTHESIS  &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PAGE_UP  &kp PAGE_DOWN  &trans     &trans  &trans
&trans  &trans           &trans             &kp LA(LEFT)  &kp LA(RIGHT)                                   &kp LA(BSPC)  &trans  &trans                  &trans  &trans  &trans          &kp LA(UP)   &kp LA(DOWN)   &trans     &trans  &trans
            >;
        };

        layer_nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                 &trans  &trans  &trans    &trans        &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                                                 &trans  &trans  &trans    &kp UP_ARROW  &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp PAGE_UP   &kp END    &trans  &trans
&trans  &trans  &trans  &trans  &trans          &hm_gui LGUI LA(BSPC)  &trans  &trans                  &trans  &trans  &trans          &trans    &kp PG_DN     &kp LBKT   &trans  &trans
            >;
        };
    };
};
