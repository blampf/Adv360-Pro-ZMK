/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        mod_sticky: mod_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_STICKY";
            bindings =
                <&kp>,
                <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        layertap_stickylayer: layertap_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP_STICKYLAYER";
            bindings =
                <&mo>,
                <&sl>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        doubletap_M: doubletap_M {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLETAP_M";
            #binding-cells = <0>;
            bindings =
                <&kp LS(LG(M))>,
                <&kp LS(LG(L))>;
        };
        stickytap_layerhold: stickytap_layerhold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKYTAP_LAYERHOLD";
            bindings =
                <&mo>,
                <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        kphold_stickylayer: kphold_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "KPHOLD_STICKYLAYER";
            bindings =
                <&kp>,
                <&sl>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
        copy_paste_dance: copy_paste_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "COPY_PASTE_DANCE";
            #binding-cells = <0>;
            bindings =
                <&kp LG(C)>,
                <&kp LG(V)>;
        };
        hyphen_dash: hyphen_dash {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPHEN_DASH";
            #binding-cells = <0>;
            bindings =
                <&kp MINUS>,
                <&kp LA(LS(MINUS))>;
        };
        cut_paste_dance: cut_paste_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "CUT_PASTE_DANCE";
            #binding-cells = <0>;
            bindings =
                <&kp LG(X)>,
                <&kp LG(LA(V))>;
        };
        undo_redo_dance: undo_redo_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "UNDO_REDO_DANCE";
            #binding-cells = <0>;
            bindings =
                <&kp LG(Z)>,
                <&kp LS(LG(Z))>;
        };
        caps_word_lock: caps_word_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_LOCK";
            #binding-cells = <0>;
            bindings =
                <&kp CAPS>,
                <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lthumb_layer2 {
            bindings = <&sl 2>;
            key-positions = <73 74>;
        };

        rthumb_layer2 {
            bindings = <&sl 2>;
            key-positions = <77 78>;
        };

        twoshft_caps {
            bindings = <&kp CAPS>;
            key-positions = <48 67>;
        };

        new_combo {
            bindings = <&kp K_MUTE>;
            key-positions = <79 80>;
        };
    };

    macros {
        word_sel: word_sel {
            compatible = "zmk,behavior-macro";
            label = "WORD_SEL";
            #binding-cells = <0>;
            bindings =
                <&kp LA(LEFT) &kp LA(RIGHT) &kp LA(LS(LEFT))>,
                <&macro_press>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
       &kp ESCAPE     &kp N1           &kp N2                &kp N3  &kp N4  &kp N5             &tog 1                                                                                    &mo 3  &kp N6    &kp N7    &kp N8      &kp N9             &kp N0  &kp MINUS
          &kp TAB      &kp Q            &kp W                 &kp E   &kp R   &kp T  &copy_paste_dance                                                                                    &none   &kp Y     &kp U     &kp I       &kp O              &kp P   &kp BSLH
&sk LS(LA(LCTRL))      &kp A            &kp S                 &kp D   &kp F   &kp G   &undo_redo_dance    &kp ESC  &kp LCTRL  &none  &none  &kp RCTRL  &hm LG(LS(V)) LG(SPACE)        &word_sel   &kp H     &kp J     &kp K       &kp L      &kp SEMICOLON    &kp SQT
        &kp LSHFT      &kp Z            &kp X                 &kp C   &kp V   &kp B              &none      &none   &kp LALT  &none  &none   &kp RALT                    &none            &none   &kp N     &kp M    &kp UP  &kp PERIOD          &kp SLASH  &kp RSHFT
            &sl 2  &kp GRAVE  &caps_word_lock  &sk LS(LA(LC(LGUI)))   &none             &hm LSHFT BSPC  &lt 2 TAB   &kp LGUI                 &kp RGUI           &hm LALT ENTER  &hm RSHFT SPACE          &kp LEFT  &kp DOWN   &kp RIGHT  &kp RIGHT_BRACKET      &sl 4
            >;
        };

        layer_keypad {
            bindings = <
&kp EQUAL     &kp N1    &kp N2    &kp N3     &kp N4  &kp N5    &trans                                                               &mo 3  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
  &kp TAB      &kp Q     &kp W     &kp E      &kp R   &kp T     &none                                                               &none   &kp Y   &kp KP_N7     &kp KP_N8      &kp KP_N9     &kp KP_MINUS   &kp BSLH
  &kp ESC      &kp A     &kp S     &kp D      &kp F   &kp G     &none  &kp LCTRL  &kp LALT  &none  &none   &kp LGUI  &kp RCTRL      &none   &kp H   &kp KP_N4     &kp KP_N5      &kp KP_N6      &kp KP_PLUS    &kp SQT
&kp LSHFT      &kp Z     &kp X     &kp C      &kp V   &kp B     &none      &none  &kp HOME  &none  &none  &kp PG_UP      &none      &none   &kp N   &kp KP_N1     &kp KP_N2      &kp KP_N3     &kp KP_ENTER  &kp RSHFT
    &mo 2  &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp BSPC    &kp DEL   &kp END                &kp PG_DN  &kp ENTER  &kp KP_N0              &kp UP      &kp DOWN     &kp KP_DOT         &kp RBKT      &mo 2
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2  &kp F3        &kp F4           &kp F5  &kp F6            &tog 1                                                          &trans  &kp F7        &kp F8        &kp F9   &kp F10  &kp F11  &kp F12
&trans  &trans  &trans        &trans           &trans  &trans  &cut_paste_dance                                                          &trans  &trans        &trans        &trans    &trans   &trans   &trans
&trans  &trans  &trans  &kp QUESTION  &kp EXCLAMATION  &trans            &trans  &trans  &trans  &none  &none  &trans  &trans  &kp LA(LS(LEFT))  &trans  &hyphen_dash        &trans   &kp SQT   &trans   &trans
&trans  &trans  &trans        &trans           &trans  &trans             &none   &none  &trans  &none  &none  &trans   &none             &none  &trans        &trans     &kp COMMA    &trans   &trans   &trans
&trans  &trans  &trans        &trans    &kp LG(GRAVE)                    &trans  &trans  &trans                &trans  &trans            &trans          &kp C_VOL_UP  &kp C_VOL_DN  &kp LBKT   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4                   &none                                                                           &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none
&none         &none           &none  &kp UP_ARROW            &none         &none             &bootloader                                                                      &bootloader         &none         &none        &trans         &none         &none  &none
&none         &none  &kp LEFT_ARROW      &kp DOWN  &kp RIGHT_ARROW         &none  &rgb_ug RGB_MEFS_CMD 5  &bt BT_CLR  &none  &none  &none  &bt BT_CLR  &bt BT_CLR  &rgb_ug RGB_MEFS_CMD 5         &none        &trans        &trans        &trans         &none  &none
&none      &kp HOME         &kp END     &kp PG_DN        &kp PG_UP         &none                   &none       &none  &none  &none  &none       &none       &none                   &none         &none        &trans        &trans        &trans        &trans  &none
&none         &none           &none    &bl BL_INC       &bl BL_DEC                       &rgb_ug RGB_TOG  &bl BL_TOG  &none                     &none  &bl BL_TOG         &rgb_ug RGB_TOG                  &bl BL_INC    &bl BL_DEC         &none         &none  &none
            >;
        };

        app_launcher {
            bindings = <
&trans  &kp LS(LG(NUMBER_1))  &trans  &trans  &trans  &trans  &trans                                                  &trans         &trans          &trans             &trans              &trans  &trans  &trans
&trans                &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans         &trans          &trans             &trans              &trans  &trans  &trans
&trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans         &trans          &trans             &trans       &kp LS(LG(L))  &trans  &trans
&trans                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LG(N))   &kp LG(LS(M))  &kp LS(LG(COMMA))  &kp LS(LG(PERIOD))  &trans  &trans
&trans                &trans  &trans  &trans  &trans          &trans  &trans  &trans                  &trans  &trans  &trans                 &kp LG(LC(UP))   &kp LG(LC(DOWN))              &trans  &trans  &trans
            >;
        };
    };
};
